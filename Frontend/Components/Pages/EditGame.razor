@page "/editgame"
@page "/editgame/{id:int}"

@inject NavigationManager NavigationManager
@inject GamesClients GamesClient
@inject GenreClient GenreClient
@rendermode InteractiveServer


<PageTitle>New Game</PageTitle>


@if (genres == null || game == null)
{
    <p class="text-center mb-3">Loading...</p>
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <h1 class="h1 text-center text-dark">@title</h1>


    <div class="row">
        <div class="col-md-4">
            @* Editforms for new game *@
            <EditForm Model="@game" FormName="editGame" OnValidSubmit="HandleSubmit"> @* OnValidSubmit communicates witht he
            model for required fields*@
                <DataAnnotationsValidator />

                <div class="form-floating mb-3">
                    <InputText id="name" class="form-control" @bind-Value="game.Name" placeholder="Name" />
                    <label for="name">Name</label>
                    <ValidationMessage For="@(() => game.Name)" />
                </div>
                @* <InputText id="description" class="form-control" @bind-Value="game.Description"
            placeholder="Description" rows="3" />
            <label for="description">Description</label>
            <ValidationMessage For="@(() => game.Description)" /> *@
                <div class="form-floating mb-3">

                    <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#descriptionModal"> <i
                            class="bi bi-pencil-square"></i> </button>
                </div>
                <GameDescription />

                <div class="form-floating mb-3">
                    <InputSelect id="genre" class="form-select" @bind-Value="game.GenreId">

                        <option value="">Select a Genre</option>
                        @foreach (var genre in genres)
                        {
                            <option value="@genre.Id">@genre.Name</option>
                        }

                    </InputSelect>
                    <label for="genre">Genre</label>
                    <ValidationMessage For="@(() => game.GenreId)" />

                </div>


                <div class="form-floating mb-3">
                    <InputNumber id="price" class="form-control" @bind-Value="game.Price" />
                    <label for="price">Price</label>
                    <ValidationMessage For="@(() => game.Price)" />


                </div>

                <div class="form-floating mb-3">
                    <InputDate id="releaseDate" class="form-control" @bind-Value="game.ReleaseDate"
                        placeholder="Release Date" />
                    <label for="releaseDate">Release Date</label>
                </div>


                <button type="submit" class="btn btn-success">Save</button>
                <a role="button" class="btn btn-secondary" href="/">Cancel</a>
            </EditForm>

        </div>
    </div>

}
@code {
    [Parameter] // This attribute is used to supply the parameter from the URL
    public int? Id { get; set; }

    [SupplyParameterFromForm] // This attribute is used to supply the parameter from the form
    private GameDetails? game { get; set; }


    private Genre[]? genres;

    private string title = string.Empty;

    protected override void OnParametersSet()
    {
        // we are doing this to prevent the game from being overwritten
        if (game is not null)
        {
            return;
        }

        if (Id.HasValue)
        {
            game = GamesClient.GetGame(Id.Value);
            title = $"Editing: {game.Name}";
        }
        else
        {
            game = new GameDetails
                {
                    Name = string.Empty,
                    ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow),
                };
            title = "New Game";
        }
    }

    protected override void OnInitialized()
    {
        genres = GenreClient.GetGenres();
    }

    private void HandleSubmit()
    {
        ArgumentNullException.ThrowIfNull(game);

        if (Id is null)
        {
            GamesClient.AddGame(game);
        }
        else
        {
            game.Id = Id.Value; // Because the Id is not part of the form, we need to set it here
            GamesClient.UpdateGame(game);
        }

        NavigationManager.NavigateTo("/"); // using the dependency injection to navigate to the home page
    }
}
